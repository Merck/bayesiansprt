beta.0 = rep(1, n.beta) #initial value for the MH
set.seed(1337)
y <- rnorm(n = 20, mean = 10, sd = 5)
c(mean = mean(y), sd = sd(y))
model <- function(p, y) {
log_lik <- sum(dnorm(y, p["mu"], p["sigma"], log = T))  # the log likelihood
log_post <- log_lik + dnorm(p["mu"], 0, 100, log = T) + dlnorm(p["sigma"],
0, 4, log = T)
log_post
}
inits <- c(mu = 0, sigma = 1)
fit <- optim(inits, model, control = list(fnscale = -1), hessian = TRUE, y = y)
fit
inits
model()
model
model(c(0,1), y)
p= c(0, 1)
p= c(mu = 0, sigma = 1)
sum(dnorm(y, p["mu"], p["sigma"], log = T))
p["mu"]
beta.0 = rep(1, n.beta) #initial value for the MH
mu = rep(0, n.beta)     #hyperparameter values for betas
shiny::runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/act')
runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/act_ps')
####################################################
# R code: PSG with primary and secondary endpoints #
####################################################
#############
# Objective #
#############
# Scatter plots for pairs of diurnal/nocturnal actigraphy
# marker from the same day or night prior versus standard
# measure of EDS and Cognition for Lead-in Period and the
# Monitoring Period will be created and examined. Here,
# the actigraphy data will be averaged within each Lead-in
# Period and the Monitoring Period.
#################
# Load packages #
#################
library(shiny)
library(ggplot2)
library(purrr)
library(dplyr)
library(tidyverse)
library(readxl)
#########################
# Set working directory #
#########################
workingDirectory = '/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/act_ps'
setwd(workingDirectory)
#########################################
# Read the Actigraphy data and EDS data #
#########################################
data.act = read.csv("./data/Actigraph_EDT_GDAT_BAD_Exclude_Include_wt_Visit_updated.csv", header = TRUE)
data.eds = read.csv("./data/combined_data.csv", header = T)
###########################################
# Select required variables from the data #
###########################################
# Select, rename, filer the variables from actigraphy
data.act = data.act %>%
select(c(ACTIGRAPHYSUBJID, ACTIGRAPHYTPT, ACTIGRAPHYTESTCD, ACTIGRAPHYORRES))
data.act.mean = data.frame(data.act %>%
group_by(ACTIGRAPHYSUBJID, ACTIGRAPHYTPT, ACTIGRAPHYTESTCD) %>%
summarise(mean.val = mean(ACTIGRAPHYORRES, na.rm=T))) %>%
rename(value = mean.val, visit = ACTIGRAPHYTPT, subject = ACTIGRAPHYSUBJID,
marker = ACTIGRAPHYTESTCD)%>%
filter(visit != "DAY1 WITHDRAWAL/WASHOUT")
data.act.mean$visit = factor(data.act.mean$visit,
levels = c("DAY3 LEAD-IN", "DAY7 LEAD-IN",
"DAY5 MONITORING", "DAY9 MONITORING",
"DAY13 MONITORING", "DAY17 MONITORING"))
data.act.mean = arrange(data.act.mean, visit)
# Select the variables for EDS
data.eds = data.eds[ ,-1]
data.eds$visit = as.factor(data.eds$visit)
levels(data.eds$visit) = c("DAY3 LEAD-IN", "DAY7 LEAD-IN", "DAY5 MONITORING",
"DAY9 MONITORING", "DAY13 MONITORING", "DAY17 MONITORING")
data.eds$subject = as.factor(data.eds$subject)
data.eds$visit = as.factor(data.eds$visit)
data.eds$marker = as.factor(data.eds$marker)
# Final data for analysis
data.analysis = rbind(data.act.mean, data.eds)
data_wide = spread(data.analysis, marker, value)%>%
drop_na()
names(data_wide)
data.analysis = rbind(data.act.mean, data.eds)
data_wide = spread(data.analysis, marker, value)%>%
drop_na()%>%
select(!BAD)
names(data_wide)
runApp()
runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/psg_ps/psg_ps_boxplot')
runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/psg_ps/psg_ps_boxplot')
library(ggpmisc)
install.packages("ggpmisc")
library(ggpmisc)
runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/psg_ps/psg_ps_boxplot')
runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/psg_ps/psg_ps_boxplot')
library(shiny)
library(ggplot2)
library(purrr)
library(dplyr)
library(readxl)
library(tidyverse)
library(sas7bdat)
library(haven)
library(ggpubr)
library(ggpmisc)
library(corrplot)
workingDirectory = '/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/psg_ps/psg_ps_boxplot'
setwd(workingDirectory)
##################################
# Read the PSG data and EDS data #
##################################
############
# SAS data #
############
sleep.edt = read_sas("./data/ar_sleep_edt_nv.sas7bdat")
ess.data = read_sas("./data/ar_ess_qs.sas7bdat")
det.data = read_sas("./data/ar_det_edt_ft.sas7bdat")
idn.data = read_sas("./data/ar_idn_edt_ft.sas7bdat")
gml.data = read_sas("./data/ar_gml_edt_ft.sas7bdat")
isl.data = read_sas("./data/ar_isl_edt_ft.sas7bdat")
isrl.data = read_sas("./data/ar_isrl_edt_ft.sas7bdat")
# Primary and secondary data
combined_ps = read.csv("./data/combined_data.csv", header = T)[,-1]
ps_data = combined_ps
ps_data$subject = as.factor(ps_data$subject)
# PSG data
var_psg = c("Total Sleep Time", "Wake After Sleep Onset", "Sleep Efficiency",
"Awakenings", "Total Wake Time", "Periodic Limb Movements" )
data_psg = sleep.edt%>%
select(c("SUBJID", "NVSCAT", "NVSTRESN", "NVTEST", "NVTPT", "NVEVLINX", "NVTESTCD"))%>%
filter(NVSCAT == "PSG")%>%
filter(NVTEST %in% var_psg)%>%
rename(value = NVSTRESN, visit = NVTPT, subject = SUBJID, marker = NVTESTCD)%>%
filter(!(NVEVLINX %in%  "FROM ONSET OF SLEEP (SOL1) TO LIGHTS ON"))%>%
select(-c(NVEVLINX, NVSCAT, NVTEST))
data_psg$subject = as.factor(as.numeric(data_psg$subject))
data_psg$visit = as.factor(data_psg$visit)
data_psg$marker = as.factor(data_psg$marker)
data_all = full_join(data_psg, ps_data, by = c("subject", "visit", "marker", "value"))
data_all$visit = factor(data_all$visit,
levels = c("DAY3 LEAD-IN", "DAY7 LEAD-IN",
"DAY5 MONITORING", "DAY9 MONITORING",
"DAY13 MONITORING", "DAY17 MONITORING"))
runApp()
runApp()
runApp()
runApp()
shiny::runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/psg_ps/psg_ps_scatter')
runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/psg_ps/psg_ps_scatter')
library(shiny)
library(ggplot2)
library(purrr)
library(dplyr)
library(readxl)
library(tidyverse)
library(sas7bdat)
library(haven)
runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/psg_ps/psg_ps_scatter')
runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/psg_ps/psg_ps_scatter')
shiny::runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/psg_ps/psg_ps_scatter')
?dcast
install.packages("maditr")
library(maditr)
library(maditr)
runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/psg_ps/psg_ps_scatter')
shiny::runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/psg_ps/psg_ps_scatter')
runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/psg_ps/psg_ps_scatter')
library(ggpmisc)
runApp('/SFS/project/shinyapps/ctchpcvashy005/open/R363/pauleri/MK0000401/exploratory/psg_ps/psg_ps_scatter')
library(bayesiansprt)
library(bayesiansprt)
library(bayesiansprt)
library(bayesiansprt)
library(bayesiansprt)
library(bayesiansprt)
boundary.result = SPRTboundary(method = method, n.event = n.event,
n.start = n.start, n.increment = n.increment,
ve.null = ve.null, ve.alt = ve.alt, type1 = type1,
power = power, ratio.alloc = ratio.alloc,
optimum.w = optimum.w, w = w, b.prior = b.prior)
boundary.result = SPRTboundary(method = method, n.event = n.event,
n.start = n.start, n.increment = n.increment,
ve.null = ve.null, ve.alt = ve.alt, type1 = type1,
power = power, ratio.alloc = ratio.alloc,
optimum.w = optimum.w, w = 0.8, b.prior = b.prior)
boundary.result = SPRTboundary(method, n.event, n.start, n.increment, ve.null,
ve.alt, type1, power, ratio.alloc, optimum.w, w,
b.prior)
method = "Bayes"
n.event = 60
n.start = 30
n.increment = 5
ve.null = 0.3
ve.alt = 0.75
type1 = 0.025
power = 0.9
ratio.alloc = 1
optimum.w = TRUE
w = 0.8
b.prior = 1
########################
# Calculate boundaries #
########################
boundary.result = SPRTboundary(method, n.event, n.start, n.increment, ve.null,
ve.alt, type1, power, ratio.alloc, optimum.w, w,
b.prior)
boundary.result
SPRTonVE(n.sim = 10000, boundary.val = boundary.result$boundary,
ve.null = boundary.result$ve.null, ve.alt = boundary.result$ve.alt,
ve = boundary.result$ve.null, ratio.alloc = boundary.result$ratio.allloc,
seed = 134)
#No of events
n.count = nrow(boundary.val)
n.sim = 10000; boundary.val = boundary.result$boundary;
ve.null = boundary.result$ve.null; ve.alt = boundary.result$ve.alt;
ve = boundary.result$ve.null; ratio.alloc = boundary.result$ratio.allloc;
seed = 134
#No of events
n.count = nrow(boundary.val)
#Probabilities of binomial success
p = ratio.alloc*(1-ve)/(ratio.alloc*(1-ve)+1)
##################
# Simulated data #
##################
x =  matrix(NA, n.sim, n.count)
for(i in 1:n.sim){
set.seed(seed+3*i)
x[i, 1] = rbinom(1, boundary.val$m[1], p)
for(j in 2: n.count){
set.seed(123*j+i)
y =  rbinom(1, (boundary.val$m[j] - boundary.val$m[j-1]), p)
x[i,j] = x[i, j-1] + y
}
}
warnings()
boundary.val$m
rbinom(1, boundary.val$m[1], p)
boundary.val$m[1]
p
p = ratio.alloc*(1-ve)/(ratio.alloc*(1-ve)+1)
p
ve
ratio.alloc
library(bayesiansprt)
library(bayesiansprt)
library(bayesiansprt)
library(bayesiansprt)
library(bayesiansprt)
library(bayesiansprt)
getwd()
library(testthat)
library(bayesiansprt)
library(dplyr)
test_check("bayesiansprt")
